---
import '../styles/styles.scss';
import '../styles/globals.scss';
import Card from "./ui/Card.astro";
---

<script>
    const inspire = document.getElementById('inspirationAmount');
    const personal = document.getElementById('personalAmount');
    const commerce = document.getElementById('commerceAmount');
    const resources = document.getElementById('resourcesAmount');
    const free = document.getElementById('freeAmount');
    const all = document.getElementById('totalAmount');

    let items = document.querySelectorAll('.item');

    const myList = document.getElementById('contentWrap');

    const typeCounts = {};

    for (const listItem of myList.children) {
        const itemType = listItem.firstElementChild.textContent.toLowerCase().trim();

        if (typeCounts[itemType]) {
            typeCounts[itemType]++;
        } else {
            typeCounts[itemType] = 1;
        }
    }

    let inspireType = 'inspiration',
        personalType = 'personal',
        commerceType = 'commerce',
        resourcesType = 'resources',
        freeType = 'free';

    let total = 0;
    for (const type in typeCounts) {
        console.log(`Type "${type}": ${typeCounts[type]} occurrences`);
            total += typeCounts[type];


        inspire.textContent = `${typeCounts[inspireType]}`.toString();
        personal.textContent = `${typeCounts[personalType]}`.toString();
        commerce.textContent = `${typeCounts[commerceType]}`.toString();
        resources.textContent = `${typeCounts[resourcesType]}`.toString();
        free.textContent = `${typeCounts[freeType]}`.toString();
        all.textContent = `${total}`.toString();
    }

</script>

<section>
    <div id="filterList">
        <div>
            <section class="filterMenu">
                <h3>Filter</h3>
                <div class="filterButtonList">
                    <button class="active" id="filterAll">All<span id="totalAmount"></span></button>
                </div>
                <div class="filterButtonList">
                    <button class='filterButton' aria-label='Inspiration contentt'><a>Inspiration</a><span id="inspirationAmount"></span></button>
                    <button class='filterButton' aria-label='Personal websites, portfolios, blogs'><a>Personal</a><span id="personalAmount"></span></button>
                    <button class='filterButton' aria-label='Commerce tools'><a>Commerce</a><span id="commerceAmount"></span></button>
                    <button class='filterButton' aria-label='Resources'><a>Resources</a><span id="resourcesAmount"></span></button>
                    <button class='filterButton' aria-label='Free resources'><a>Free</a><span id="freeAmount"></span></button>
                </div>
            </section>
        </div>
    </div>
    <div id="contentWrap">
        <div class="item show free">
            <p class="labelText">FREE</p>
            <Card label="free"/>
        </div>
        <div class="item show free">
            <p class="labelText">FREE</p>
            <Card label="free"/>
        </div>
        <div class="item show free">
            <label class="labelText">insPIRATION</label>
            <Card label="inspiration" />
        </div>
        <div class="item show free">
            <p class="labelText">resources</p>
            <Card label="resources" />
        </div>
        <div class="item show free">
            <p class="labelText">resources</p>
            <Card label="resources" />
        </div>
        <div class="item show free">
            <p class="labelText">resources</p>
            <Card label="resources" />
        </div>
        <div class="item show free">
            <p class="labelText">resources</p>
            <Card label="its not dependent on tag text" />
        </div>

    </div>
</section>


<style>
    #contentWrap {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 1fr;
        grid-template-rows: auto;
        gap: 1rem;
        margin-inline: 4%;
        margin-top: 2rem;
        max-width: 1400px;
    }

    .hide {
        display: none;
    }

    .labelText {
        display: none;
    }

    .contentBlock.hide {
        display: none;
    }

    #favorites {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        flex-wrap: wrap;
        margin-inline: 4%;
    }

    section {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    #filterList {
        top: 0;
        position: sticky;
        margin: auto;
        max-width: 1200px;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        justify-content: center;
        align-items: center;
    }

    .filterButtonList {
        align-items: center;
        display: flex;
        flex-direction: row;
        gap: 0.5rem;
        flex-wrap: wrap;
        background-color: #d1def6;
        border: #3574F0 1px solid;
        @apply rounded-lg;
        padding: 0.5rem 1rem;
    }


    .filterMenu {
        min-height: 50px;
        width: 100%;
        align-items: center;
        display: flex;
        position: sticky;
        flex-direction: row;
        justify-content: space-between;
        gap: 0.5rem;
        overflow-x: clip;
    }


    svg {
        height: 1.5rem;
        color: #3574F0;
    }

    h3 {
        display: none;
        font-size: 1rem !important;
    }




    .filterButton, #filterAll {
        display: flex;
        align-items: center;
        gap: 0.2rem;
    }

    .filterButton, #filterAll {
        @apply px-3;
        @apply py-1;
        @apply rounded-full;
        @apply transition-colors;
        @apply duration-100;

        font-size: 0.9rem;
        font-weight: 500;
        color: rgb(9, 32, 128);
        border: 1px transparent solid;
    }

    .filterButton, #filterAll {
    //color: red !important;
    }

    .filterButton:hover, #filterAll:hover {
        border: 1px #3574F0 solid;
    }

    .filterButton:active, #filterAll:active {
        color: #F0F1F2;
        font-weight: 500;
        background-color: #3574F0;
        border: 1px transparent solid;
    }

    .filterButton.active, #filterAll.active {
        color: #F0F1F2;
        font-weight: 500;
        background-color: #3574F0;
        border: 1px transparent solid;
    }
    .implied {
        background-color: rgba(53, 115, 240, 0.25);
    }

    .filterButton span, #totalAmount {
        font-size: 0.7rem !important;
        position: relative;
        top: 1px;
        font-weight: 600;
        opacity: 0.5;
        @apply p-1;
    }

</style>

<script>



    let filters = new Set();
    let buttons = document.querySelectorAll('.filterButton');
    let items = document.querySelectorAll('.item');
    let showAll = document.getElementById('filterAll');

    //filter button listener
    for (const btn of buttons) {
        btn.addEventListener('click', () => {
            if (btn.classList.contains('active')) {
                btn.classList.remove('active');
                filters.delete(btn.firstElementChild.textContent.toUpperCase());
            } else {
                btn.classList.add('active');
                filters.add(btn.firstElementChild.textContent.toUpperCase());
            }

            if (showAll.classList.contains('active')) {
                showAll.classList.remove('active');
            } else if (filters.size === 0) {
                showAll.classList.add('active');
                showAllItems();
            } else if (filters.size === 5) {
                showAll.classList.add('implied');
                showAllItems();
            } else if (filters.size <= 5) {
                showAll.classList.remove('implied');
            }
            updateList();
        })

    }

    // showAll listener
    showAll.addEventListener('click', () => {
        if (showAll.classList.contains('active')) {
            showAll.classList.remove('active');
        } else {
            showAll.classList.add('active');
            filters.clear();
            showAllItems();
        }

        for (const btn of buttons) {
            if (filters.size === 0) {
                btn.classList.remove('active');
                showAll.classList.add('active');
                showAllItems();
            } else {

            }
        }
        updateList();
    })
    let labelsText = document.querySelectorAll('.item small')
    function updateList() {
        if (filters.size === 0) {
            showAllItems();
        } else {

            items.forEach(item => {

                let itemText = item.firstElementChild.textContent.toUpperCase().trim();

                if (filters.has(itemText)) {

                    item.classList.add('show');
                    item.classList.remove('hide');
                } else {
                    item.classList.add('hide');
                    item.classList.remove('show');
                }
            });
        }

    }

    function showAllItems() {
        for (const item of items) {
            item.classList.add('show');
            item.classList.remove('hide');
        }
    }


</script>