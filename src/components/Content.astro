---
import '../styles/styles.scss';
import '../styles/globals.scss';
import Card from "./ui/Card.astro";
---

<section>
    <div id="filterList">
        <div>
            <section class="filterMenu">
                <h3>Filter</h3>
                <div class="filterButtonList">
                    <button class="active" id="filterAll">All</button>
                </div>
                <div class="filterButtonList">
                    <button class='filterButton' aria-label='Inspiration contentt'>Inspiration</button>
                    <button class='filterButton' aria-label='Personal websites, portfolios, blogs'>Personal</button>
                    <button class='filterButton' aria-label='Commerce tools'>Commerce</button>
                    <button class='filterButton' aria-label='Resources'>Resources</button>
                    <button class='filterButton' aria-label='Free resources'>Free</button>
                </div>
            </section>
        </div>
    </div>
    <div id="contentWrap">
        <div class="item show free">
            <p class="labelText">FREE</p>
            <Card label="free"/>
        </div>
        <div class="item show free">
            <p class="labelText">FREE</p>
            <Card label="free"/>
        </div>
        <div class="item show free">
            <label class="labelText">insPIRATION</label>
            <Card label="inspiration" />
        </div>
        <div class="item show free">
            <p class="labelText">resources</p>
            <Card label="resources" />
        </div>
        <div class="item show free">
            <p class="labelText">resources</p>
            <Card label="resources" />
        </div>
        <div class="item show free">
            <p class="labelText">resources</p>
            <Card label="resources" />
        </div>
        <div class="item show free">
            <p class="labelText">resources</p>
            <Card label="its not dependent on tag text" />
        </div>

    </div>
</section>


<style>
    #contentWrap {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 1fr;
        grid-template-rows: auto;
        gap: 1rem;
        margin-inline: 4%;
        margin-top: 2rem;
        max-width: 1400px;
    }

    .hide {
        display: none;
    }

    .labelText {
        display: none;
    }

    .contentBlock.hide {
        display: none;
    }

    #favorites {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        flex-wrap: wrap;
        margin-inline: 4%;
    }

    section {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    #filterList {
        top: 0;
        position: sticky;
        margin: auto;
        max-width: 1200px;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        justify-content: center;
        align-items: center;
    }

    .filterButtonList {
        align-items: center;
        display: flex;
        flex-direction: row;
        gap: 0.5rem;
        flex-wrap: wrap;
        background-color: #d1def6;
        border: #3574F0 1px solid;
        @apply rounded-lg;
        padding: 0.5rem 1rem;
    }


    .filterMenu {
        min-height: 50px;
        width: 100%;
        align-items: center;
        display: flex;
        position: sticky;
        flex-direction: row;
        justify-content: space-between;
        gap: 0.5rem;
        overflow-x: clip;
    }


    svg {
        height: 1.5rem;
        color: #3574F0;
    }

    h3 {
        display: none;
        font-size: 1rem !important;
    }

    @media screen and (max-width: 800px) {
        section {
            flex-direction: row;
            padding: 1rem;
            border-radius: 0;
        }

    }


    .filterButton, #filterAll {
        display: flex;
    }

    .filterButton, #filterAll {
        @apply px-3;
        @apply py-1;
        @apply rounded-full;
        @apply transition-colors;
        @apply duration-100;

        font-size: 0.9rem;
        font-weight: 500;
        color: rgb(9, 32, 128);
        border: 1px transparent solid;
    }

    .filterButton, #filterAll {
    //color: red !important;
    }

    .filterButton:hover, #filterAll:hover {
        border: 1px #3574F0 solid;
    }

    .filterButton:active, #filterAll:active {
        color: #F0F1F2;
        font-weight: 500;
        background-color: #3574F0;
        border: 1px transparent solid;
    }

    .filterButton.active, #filterAll.active {
        color: #F0F1F2;
        font-weight: 500;
        background-color: #3574F0;
        border: 1px transparent solid;
    }
    .implied {
        background-color: rgba(53, 115, 240, 0.25);
    }

</style>

<script>
    let filters = new Set();
    let buttons = document.querySelectorAll('.filterButton');
    let items = document.querySelectorAll('.item');
    let showAll = document.getElementById('filterAll');

    //filter button listener
    for (const btn of buttons) {
        btn.addEventListener('click', () => {
            if (btn.classList.contains('active')) {
                btn.classList.remove('active');
                filters.delete(btn.innerHTML.toUpperCase());
            } else {
                btn.classList.add('active');
                filters.add(btn.innerHTML.toUpperCase());
            }

            if (showAll.classList.contains('active')) {
                showAll.classList.remove('active');
            } else if (filters.size === 0) {
                showAll.classList.add('active');
                showAllItems();
            } else if (filters.size === 5) {
                showAll.classList.add('implied');
                showAllItems();
            } else if (filters.size <= 5) {
                showAll.classList.remove('implied');
            }
            updateList();
        })

    }

    // showAll listener
    showAll.addEventListener('click', () => {
        if (showAll.classList.contains('active')) {
            showAll.classList.remove('active');
        } else {
            showAll.classList.add('active');
            filters.clear();
            showAllItems();
        }

        for (const btn of buttons) {
            if (filters.size === 0) {
                btn.classList.remove('active');
                showAll.classList.add('active');
                showAllItems();
            } else {

            }
        }
        updateList();
    })
    let labelsText = document.querySelectorAll('.item small')
    function updateList() {
        if (filters.size === 0) {
            showAllItems();
        } else {

            items.forEach(item => {
                console.log(item.querySelector('p') + ' item');

                item.firstElementChild.textContent;

                let itemText = item.firstElementChild.textContent.toUpperCase().trim();

                if (filters.has(itemText)) {

                    item.classList.add('show');
                    item.classList.remove('hide');
                } else {
                    item.classList.add('hide');
                    item.classList.remove('show');
                }
            });
        }

    }

    function showAllItems() {
        for (const item of items) {
            item.classList.add('show');
            item.classList.remove('hide');
        }
    }


</script>